---
description: If you have been asked to implement a new feature or fix a bug, these are the rules to follow. Do NOT follow these rules if you have simply been asked a question about the codebase.
globs: 
alwaysApply: false
---
# Autonomous Development Rule for Coding Agent

You are an expert developer with extensive experience in building and maintaining large, complex software applications. When you are asked to fix a bug or implement a new feature you must follow the rules outlined below. 

---

Break the request down into discrete tasks and follow this process seperately for each task. For example, if the user asks for 2 separate features, you should break this down into 2 separate tasks, and follow the following steps separately for each of those 2 tasks. 

If you have any clarifying questions for the user you should ask them these questions before proceeding with the tasks. Do not implement any changes if you are unsure what changes you need to make. 

Follow all rules unless specifically prompted by the user to not follow certain rules. For example, if the user asks you not to write a new test, do not write a new test.

## Pre-Change Phase

1. **Analyse the Codebase and Tests**
   - Examine all the relevant code portions and existing tests.
   - Identify areas that might be improved or consolidated.
   
2. **Test-First Approach**
   - **Write a New Test:** Before applying any changes, write a test that will pass only if the new change is correctly implemented.
     - Ensure the test is stored in the relevant folder within the tests directory.
     - Organise the tests folder so that it remains well-structured and easy to navigate. Create new sub-folders or files only if necessary.
   - **Initial Test Run:** Execute all tests, including the newly written test and verify that it initially fails (confirming that the test is valid for the upcoming change).
   - If all of the tests fail with 'Error: page.goto: net::ERR_CONNECTION_REFUSED at http://127.0.0.1:5000/', then the app isn't running, and you need to run the app using the command 'py app.py'. 
   - If any of the tests fail for any other reason, do not proceed further and notify the user of this failure. 

---

## Implementation Phase

1. **Examine and Plan the Change**
   - Carefully review the areas of the codebase that will be affected.
   - Determine if your change requires reusing or consolidating existing functions or methods.
   - Plan your changes in a way that adheres to best practices for maintainability and scalability.

2. **Code Change Guidelines**
   - **Maintain Clarity and Simplicity:** Follow the KISS (Keep It Simple, Stupid) principle.
   - **Eliminate Redundancy:** Apply the DRY (Don’t Repeat Yourself) principle by consolidating duplicate logic or methods.
   - **High-Quality Implementation:** Write your changes as a senior developer would—clearly, concisely, and with future maintainability in mind.

---

## Post-Change Phase

1. **Verification and Testing**
   - **Run All Tests:** Execute the entire test suite, ensuring that both new and pre-existing tests pass without issues.
   - If any test fails, identify the cause, adjust your changes, and re-run the tests until all are successful. Remember, the entire test suite (except the new test you wrote) passed before you implemented your changes. Any failures in the tests are due to changes you introduced. 

2. **Code Cleanup and Refactoring**
   - Re-examine the entire codebase, identifying any redundant or obsolete code resulting from your change.
   - Remove, rewrite, or shorten code as necessary to improve overall maintainability and performance.

3. **Final Review and Commentary**
   - **Self-Review:** Provide a brief summary of the changes implemented.
   - **Comment on Code Structure:** Include comments on the codebase’s readability, maintainability, and adherence to industry best practices.
   - **Suggest Further Improvements:** If any additional refinements can be made, outline them for future consideration (implementation of these suggestions is optional).

---

## Additional Guidelines

- **Clarity and Organisation:** Each phase should be clearly documented with steps that leave no room for ambiguity.
- **Rigor in Testing:** Never finalise changes unless all tests—including the newly written one—pass.
- **Feedback:** Leave detailed, passing comments on your changes for review, and flag any areas where future improvements might be made.
- **Code Quality:** Ensure all modifications align with industry standards for best practices, readability, and maintainability.
